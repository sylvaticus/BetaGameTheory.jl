var documenterSearchIndex = {"docs":
[{"location":"api.html#The-StrategicGames-Module","page":"API","title":"The StrategicGames Module","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"StrategicGames","category":"page"},{"location":"api.html#StrategicGames","page":"API","title":"StrategicGames","text":"StrategicGames module\n\nProvide utility functions to work with strategic games, including finding Nash equilibrium simultaneous games when mixed strategies are allowed. \n\nAll functions work with generic n players (the examples generally show 2 players for simplicity)\n\n\n\n\n\n","category":"module"},{"location":"api.html#Module-Index","page":"API","title":"Module Index","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Modules = [StrategicGames]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"api.html#Detailed-API","page":"API","title":"Detailed API","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Modules = [StrategicGames]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"api.html#StrategicGames.best_response-Tuple{Any, Any, Any}","page":"API","title":"StrategicGames.best_response","text":"best_response(payoff_array,strategy_profile,player)\n\nReturn (possibly one of many) best strategy and corrsponding expected payoff for a given player\n\nParameters:\n\npayoff_array: the nplayers+1 array of payoffs\nstrategy_profile: the vector of vectors defining the strategies for the N players. The strategy for player n for which the best response is looked is used as init value in the optimisation\nplayer: counter of the player for which we want to compute the best_response (e.g. 1 or 3)\n\nReturns:\n\nA named tuple with: expected_payoff, optimal_strategy, status (of the underlying optimisation)\n\nExample:\n\n`julia julia using StrategicGames julia payoff_array  = (34) (15) (42) (23)  prisoners dilemma 22 MatrixTupleInt64 Int64  (3 4)  (1 5)  (4 2)  (2 3) julia best_response(expand_dimensions(payoff_array)050505052) (expected_payoff = 40 optimal_strategy = 00 10 status = MathOptInterfaceOPTIMAL)\n\n\n\n\n\n","category":"method"},{"location":"api.html#StrategicGames.dominated_strategies-Tuple{Any, Any}","page":"API","title":"StrategicGames.dominated_strategies","text":"dominated_strategies(payoff,player;strict=true)\n\nReturn a vector with the positions of the actions for player player that are dominates by at least one of his other actions.\n\nExample\n\njulia> using StrategicGames\njulia> payoff_array = expand_dimensions([(3,4) (1,5) (6,2); (2,6) (3,7) (1,7)])\n2×3×2 Array{Int64, 3}:\n[:, :, 1] =\n 3  1  6\n 2  3  1\n[:, :, 2] =\n 4  5  2\n 6  7  7\njulia> dominated_strategies(payoff_array,2,strict=false) \n2-element Vector{Int64}:\n 1\n 3\n\n\n\n\n\n","category":"method"},{"location":"api.html#StrategicGames.expand_dimensions-Union{Tuple{AbstractArray{T}}, Tuple{T}, Tuple{T2}} where {T2, T<:Tuple{Vararg{T2}}}","page":"API","title":"StrategicGames.expand_dimensions","text":"expand_dimensions(x::AbstractArray{T}\n\nConvenence function to transform a N dimensional array of tuples in a N+1 dimensional array of scalars (the format used for most functions in this package).\n\nExample:\n\njulia> using StrategicGames\njulia> payoff_tuple = [(1,-1) (-1,1) (1,0); (-1,1) (1, -1) (0,1)] # 2 players, with 2 and 3 actions respectively\n2×3 Matrix{Tuple{Int64, Int64}}:\n (1, -1)  (-1, 1)  (1, 0)\n (-1, 1)  (1, -1)  (0, 1)\n\njulia> payoff_array = expand_dimensions(payoff_tuple)\n2×3×2 Array{Int64, 3}:\n[:, :, 1] =\n  1  -1  1\n -1   1  0\n\n[:, :, 2] =\n -1   1  0\n  1  -1  1\n\n\n\n\n\n","category":"method"},{"location":"api.html#StrategicGames.expected_value-Tuple{Any, Any}","page":"API","title":"StrategicGames.expected_value","text":"expected_value(v::Array{N,Real},p::Vector{Vector{Real}}) --> Real\n\nCompute the expected value (scalar) of a N-dimensional value tensor given a vector of N probability vectors, one per each dimension of the value tensor. \n\n\n\n\n\n","category":"method"},{"location":"api.html#StrategicGames.is_best_response-Tuple{Any, Any, Any}","page":"API","title":"StrategicGames.is_best_response","text":"is_best_response(payoff_array,strategy_profile,player;atol=1e-07,rtol=1e-07)\n\nDetermine if a given strategy for player player is the best response to a given strategy profile given a specific payoff matrix\n\nParameters:\n\npayoff_array: the nplayers+1 array of payoffs\nstrategy_profile: the vector of vectors defining the strategies for the N players\nplayer: counter of the player for which we want to verify if its strategy is a best_response (e.g. 1 or 3)\natol: absolute tollerance in comparing the expected utility from the given strategy and those from the optimal one [def: 1e-07]\nrtol: relative tollerance in comparing the expected utility from the given strategy and those from the optimal one [def: 1e-07]\n\nExample :\n\njulia> using StrategicGames\njulia> payoff_array = [(3,4) (1,5); (4,2) (2,3)] # prisoner's dilemma\n2×2 Matrix{Tuple{Int64, Int64}}:\n (3, 4)  (1, 5)\n (4, 2)  (2, 3)\njulia> is_best_response(expand_dimensions(payoff_array),[[0,1],[0.5,0.5]],1)\ntrue\njulia> is_best_response(expand_dimensions(payoff_array),[[0,1],[0.5,0.5]],2)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"api.html#StrategicGames.is_nash-Tuple{Any, Any}","page":"API","title":"StrategicGames.is_nash","text":"is_nash(payoff_array,strategy_profile;atol=1e-07,rtol=1e-07)\n\nDetermine if a strategy profile is a Nash equilibrium for a given payoff matrix, i.e. all strategies are (weak) best responses\n\nParameters:\n\npayoff_array: the nplayers+1 array of payoffs\nstrategy_profile: the vector of vectors defining the strategies for the N players\natol: absolute tollerance in comparing the expected utility from the given strategies and those from the optimal ones [def: 1e-07]\nrtol: relative tollerance in comparing the expected utility from the given strategies and those from the optimal ones [def: 1e-07]\n\nExample :\n\njulia> using StrategicGames\njulia> payoff_array  = [(3,4) (1,5); (4,2) (2,3)] # prisoner's dilemma\n2×2 Matrix{Tuple{Int64, Int64}}:\n (3, 4)  (1, 5)\n (4, 2)  (2, 3)\njulia> is_nash(expand_dimensions(payoff_array),[[0,1],[0,1]])\ntrue\n\n\n\n\n\n","category":"method"},{"location":"api.html#StrategicGames.nash_cp-Tuple{Any}","page":"API","title":"StrategicGames.nash_cp","text":"nash_cp(payoff_tensor;init,verbosity)\n\nFind a Nash Equilibrium for n-players simultaneous games when mixed strategies are allowed using the Complementarity Problem algorithm.\n\nParameters\n\npayoff_tensor: the nplayers+1 dimension payoff tensor of payoffs for the various players\ninit: a vector of vector of mixed strategies (i.e. PMFs) for each players to start the algorithm with. Different init points may reach different equilibrium points [def: equal probabilities for each available action by the players]\nverbosity: an integer parameter to pass to the inner solver (currently Ipopt) [def: 0]\n\nNotes\n\nThis function uses a LCP (Linear Complementarity) formulation (for nplayers >3 the algorithm actually is not linear)\nThe implementation uses the JuMP modelling language with the Ipopt solver engine (and hence it uses an interior point method instead of the pivotal approach used in the original Lemke-Howson [1964] algorithm)\nThere is no guarantee on timing and even that the algorithm converge to an equilibrium. Different equilibriums may be reached by setting different initial points \n\nReturns\n\nA named tuple with the following elements: status,equilibrium_strategies,expected_payoffs\n\nExample\n\njulia> using StrategicGames\njulia> payoff = [(-1,-1) (-3,0); (0, -3) (-2, -2)] # prisoner's dilemma\n2×2 Matrix{Tuple{Int64, Int64}}:\n (-1, -1)  (-3, 0)\n (0, -3)   (-2, -2)\njulia> eq     = nash_cp(expand_dimensions(payoff));\njulia> eq_strategies = eq.equilibrium_strategies\n2-element Vector{Vector{Float64}}:\n [-4.049752569180346e-11, 1.0000000000404976]\n [-4.0497525691839856e-11, 1.0000000000404976]\n\n\n\n\n\n","category":"method"},{"location":"index.html#StrategicGames","page":"Index","title":"StrategicGames","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Documentation for StrategicGames","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"GitHub repository","category":"page"}]
}
