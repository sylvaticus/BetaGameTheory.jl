var documenterSearchIndex = {"docs":
[{"location":"api.html#The-StrategicGames-Module","page":"API","title":"The StrategicGames Module","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"StrategicGames","category":"page"},{"location":"api.html#StrategicGames","page":"API","title":"StrategicGames","text":"StrategicGames module\n\nProvide utility functions to work with strategic games, including finding Nash equilibrium for n-player simultaneous games when mixed strategies are allowed. \n\n\n\n\n\n","category":"module"},{"location":"api.html#Module-Index","page":"API","title":"Module Index","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Modules = [StrategicGames]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"api.html#Detailed-API","page":"API","title":"Detailed API","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Modules = [StrategicGames]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"api.html#StrategicGames.expand_dimensions-Union{Tuple{AbstractArray{T}}, Tuple{T}, Tuple{T2}} where {T2, T<:Tuple{Vararg{T2}}}","page":"API","title":"StrategicGames.expand_dimensions","text":"expand_dimensions(x::AbstractArray{T}\n\nConvenence function to transform a N dimensional array of tuples in a N+1 dimensional array of scalars (the format used for most functions in this package).\n\nExample:\n\njulia> payoff_tuple = [(1,-1) (-1,1) (1,0); (-1,1) (1, -1) (0,1)] # 2 players, with 2 and 3 actions respectively\n2×3 Matrix{Tuple{Int64, Int64}}:\n (1, -1)  (-1, 1)  (1, 0)\n (-1, 1)  (1, -1)  (0, 1)\n\njulia> payoff_array = expand_dimensions(payoff_tuple)\n2×3×2 Array{Int64, 3}:\n[:, :, 1] =\n  1  -1  1\n -1   1  0\n\n[:, :, 2] =\n -1   1  0\n  1  -1  1\n\n\n\n\n\n","category":"method"},{"location":"api.html#StrategicGames.expected_value-Tuple{Any, Any}","page":"API","title":"StrategicGames.expected_value","text":"expected_value(v::Array{N,Real},p::Vector{Vector{Real}}) --> Real\n\nCompute the expected value (scalar) of a N-dimensional value tensor given a vector of N probability vectors, one per each dimension of the value tensor. \n\n\n\n\n\n","category":"method"},{"location":"api.html#StrategicGames.nash_lcp-Tuple{Any}","page":"API","title":"StrategicGames.nash_lcp","text":"nash_lcp(payoff_tensor;init,verbosity)\n\nFind a Nash Equilibrium for n-players simultaneous games when mixed strategies are allowed using the LCP algorithm.\n\nParameters\n\npayoff_tensor: the nplayers+1 dimension payoff tensor of payoffs for the various players\ninit: a vector of vector of mixed strategies (i.e. PMFs) for each players to start the algorithm with. Different init points may reach different equilibrium points [def: equal probabilities for each available action by the players]\nverbosity: an integer parameter to pass to the inner solver (currently Ipopt) [def: 0]\n\nNotes\n\nThis function uses a LCP (Linear Complementarity) formulation (for nplayers >3 the algorithm actually is not linear)\nThe implementation uses the JuMP modelling language with the Ipopt solver engine (and hence it uses an interior point method instead of the pivotal approach used in the original Lemke-Howson [1964] algorithm)\nThere is no guarantee on timing and even that the algorithm converge to an equilibrium. Different equilibriums may be reached by setting different initial points \n\nReturns\n\nA named tuple with the following elements: status,equilibrium_strategies,expected_payoffs\n\nExample\n\njulia> payoff = [(-1,-1) (-3,0); (0, -3) (-2, -2)] # prisoner's dilemma\n2×2 Matrix{Tuple{Int64, Int64}}:\n (-1, -1)  (-3, 0)\n (0, -3)   (-2, -2)\njulia> eq     = nash_lcp(expand_dimensions(payoff));\njulia> eq_strategies = eq.equilibrium_strategies\n2-element Vector{Vector{Float64}}:\n [-4.049752569180346e-11, 1.0000000000404976]\n [-4.0497525691839856e-11, 1.0000000000404976]\n\n\n\n\n\n","category":"method"},{"location":"index.html#StrategicGames","page":"Index","title":"StrategicGames","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Documentation for StrategicGames","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"GitHub repository","category":"page"}]
}
